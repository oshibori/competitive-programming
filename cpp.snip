snippet    tmp
options    head
  #include <bits/stdc++.h>

  using namespace std;
  #ifdef _DEBUG
  #define _GLIBCXX_DEBUG
  #include "dump.hpp"
  #else
  #define dump(...)
  #endif

  #define int long long
  #define ll long long
  #define ll1 1ll
  #define ONE 1ll
  #define DBG 1
  #define rep(i, a, b) for (int i = (a); i < (b); i++)
  #define rrep(i, a, b) for (int i = (b)-1; i >= (a); i--)
  #define loop(n) rep(loop, (0), (n))
  #define all(c) begin(c), end(c)
  const int INF =
      sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;
  const int MOD = (int)(1e9) + 7;
  const double PI = acos(-1);
  const double EPS = 1e-9;
  #define fi first
  #define se second
  #define pb push_back
  #define eb emplace_back
  using pii = pair<int, int>;
  // template<class T> ostream &operator<<(ostream &os,T &t){dump(t);return os;}
  template <typename T, typename S>
  istream &operator>>(istream &is, pair<T, S> &p) {
    is >> p.first >> p.second;
    return is;
  }
  template <typename T, typename S>
  ostream &operator<<(ostream &os, pair<T, S> &p) {
  os << p.first << " " << p.second;
  return os;
  }

  template <typename T> void printvv(const vector<vector<T>> &v) {
    cerr << endl;
    rep(i, 0, v.size()) rep(j, 0, v[i].size()) {
      if (typeid(v[i][j]).name() == typeid(INF).name() and v[i][j] == INF) {
        cerr << "INF";
      } else
        cerr << v[i][j];
      cerr << (j == v[i].size() - 1 ? '\n' : ' ');
    }
    cerr << endl;
  }
  /*
  typedef __int128_t Int;
  std::ostream &operator<<(std::ostream &dest, __int128_t value) {
  std::ostream::sentry s(dest);
    if (s) {
      __uint128_t tmp = value < 0 ? -value : value;
      char buffer[128];
      char *d = std::end(buffer);
      do {
        --d;
        *d = "0123456789"[tmp % 10];
        tmp /= 10;
      } while (tmp != 0);
      if (value < 0) {
        --d;
        *d = '-';
      }
      int len = std::end(buffer) - d;
      if (dest.rdbuf()->sputn(d, len) != len) {
        dest.setstate(std::ios_base::badbit);
      }
    }
    return dest;
  }

  __int128 parse(string &s) {
    __int128 ret = 0;
    for (int i = 0; i < s.length(); i++)
      if ('0' <= s[i] && s[i] <= '9')
        ret = 10 * ret + s[i] - '0';
    return ret;
  }
  */

  #ifndef _DEBUG
  #define printvv(...)
  #endif
  void YES(bool f) { cout << (f ? "YES" : "NO") << endl; }
  void Yes(bool f) { cout << (f ? "Yes" : "No") << endl; }
  template <class T> bool chmax(T &a, const T &b) {
    if (a < b) {
      a = b;
      return true;
    }
    return false;
  }
  template <class T> bool chmin(T &a, const T &b) {
    if (a > b) {
      a = b;
      return true;
    }
    return false;
  }

  signed main(signed argc, char *argv[]) {
    cin.tie(0);
    ios::sync_with_stdio(false);
    cout << fixed << setprecision(12);

    ${0}

    return 0;
  }


snippet     ini
options     head
  ${1:int} ${2:N}; cin >> $2;

snippet     inii
options     head
  ${1:int} ${2:N}, ${3:M}; cin >> $2 >> $3;

snippet     iniii
options     head
  ${1:int} ${2:a}, ${3:b}, ${4:c}; cin >> $2 >> $3 >> $4;

snippet     iniiii
options     head
  ${1:int} ${2:a}, ${3:b}, ${4:c}, ${5:d}; cin >> $2 >> $3 >> $4 >> $5;

snippet     iniiiii
options     head
  ${1:int} ${2:a}, ${3:b}, ${4:c}, ${5:d}, ${6:e}; cin >> $2 >> $3 >> $4 >> $5 >> $6;

snippet     invi
options     head
  vector<${1:int}> ${2:v}(${3:N}); rep(i, 0, $3){ cin >> $2[i]; }${0}

snippet     invii
options     head
  vector<${1:int}> ${2:v}(${3:N}), ${4:w}($3); rep(i, 0, $3){ cin >> $2[i] >> $4[i]; }${0}

snippet     inviii
options     head
  vector<${1:int}> ${2:v}(${3:N}), ${4:w}($3), ${5:u}($3); rep(i, 0, $3){ cin >> $2[i] >> $4[i]>>$5[i]; }${0}

snippet     invvi
options     head
  vector<vector<${1:int}>> ${2:v}(${3:N},vector<$1>(${4:M}));
  rep(i, 0, $3)rep(j, 0, $4) { cin >> $2[i][j]; }${0}

snippet     vi
options     word
  vector<${1:int}>

snippet     vvi
options     word
  vector<vector<${1:int}>>


snippet     vvvi
options     word
  vector<vector<vector<${1:int}>>>

snippet     inrange
options     head
  bool inrange(int x, int y) { return 0 <= x and x < ${1:N} and 0 <= y and y < ${2:M}; }

snippet     dxdy
options     head
  int dx[] = {1, 0, -1, 0}, dy[] = {0, 1, 0, -1};

snippet     gcd
options     head
  int gcd(int x,int y){return (y==0?x:gcd(y,x%y));}

snippet     bitcount
options     head
  int bitcount(int x){int c=0;while(x){x-=x&-x;c++;}return c;}

snippet     unique
options     word
  sort(all(${1:v}));
  $1.erase(unique(all($1)),$1.end());

snippet     priority_queue
abbr        pq
options     head
  priority_queue<${1:int}, vector<$1>, less<$1>>${2:pq};

snippet     modpow
abbr        pow
options     head
  //高速累乗 繰り返し自乗法
  //オーバーフローする可能性があれば掛け算にmodmul()を使う
  long long modpow(long long base, long long exponent, long long mod) {
    long long res = 1;
    while (exponent > 0) {
      if (exponent & 1)
        res = res * base % mod;
      base = base * base % mod;
      exponent >>= 1;
    }
    return res;
  }

snippet     compress
options     head
  template <typename T> vector<T> compress(vector<T> &a, vector<T> &b) {
    // 座標圧縮
    vector<T> ret;
    ret.insert(ret.end(), all(a));
    ret.insert(ret.end(), all(b));
    sort(all(ret));
    ret.erase(unique(all(ret)), ret.end());
    rep(i, 0, a.size()) a[i] = distance(ret.begin(), lower_bound(all(ret), a[i]));
    rep(i, 0, b.size()) b[i] = distance(ret.begin(), lower_bound(all(ret), b[i]));
    return ret;
  }
  
snippet     xorshift
abbr        rand
options     head
  inline uint32_t xorshift128() {
    static uint32_t x = 192479812u;
    static uint32_t y = 784892731u;
    static uint32_t z = 427398108u;
    static uint32_t w = 48382934u;
    const uint32_t t = x ^ (x << 11);
    x = y;
    y = z;
    z = w;
    w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
    return w;
  }
  inline uint32_t modulus_random(uint32_t mod) {
    const auto t = static_cast<uint64_t>(xorshift128()) * mod;
    return static_cast<uint32_t>(t >> 32);
  }

snippet     modint
abbr        mod
options     head
  template <int MOD> struct ModInt {
    static const int Mod = MOD;
    unsigned x;
    ModInt() : x(0) {}
    ModInt(signed sig) {
      int sigt = sig % MOD;
      if (sigt < 0)
        sigt += MOD;
      x = sigt;
    }
    ModInt(signed long long sig) {
      int sigt = sig % MOD;
      if (sigt < 0)
        sigt += MOD;
      x = sigt;
    }
    int get() const { return (int)x; }
  
    ModInt &operator+=(ModInt that) {
      if ((x += that.x) >= MOD)
        x -= MOD;
      return *this;
    }
    ModInt &operator-=(ModInt that) {
      if ((x += MOD - that.x) >= MOD)
        x -= MOD;
      return *this;
    }
    ModInt &operator*=(ModInt that) {
      x = (unsigned long long)x * that.x % MOD;
      return *this;
    }
    ModInt &operator/=(ModInt that) { return *this *= that.inverse(); }
  
    ModInt operator+(ModInt that) const { return ModInt(*this) += that; }
    ModInt operator-(ModInt that) const { return ModInt(*this) -= that; }
    ModInt operator*(ModInt that) const { return ModInt(*this) *= that; }
    ModInt operator/(ModInt that) const { return ModInt(*this) /= that; }
  
    ModInt inverse() const {
      signed a = x, b = MOD, u = 1, v = 0;
      while (b) {
        signed t = a / b;
        a -= t * b;
        std::swap(a, b);
        u -= t * v;
        std::swap(u, v);
      }
      if (u < 0)
        u += MOD;
      ModInt res;
      res.x = (unsigned)u;
      return res;
    }
  };
  template <int MOD> ostream &operator<<(ostream &os, const ModInt<MOD> &m) {
    return os << m.x;
  }
  template <int MOD> istream &operator>>(istream &is, ModInt<MOD> &m) {
    signed long long s;
    is >> s;
    m = ModInt<MOD>(s);
    return is;
  };
  // pow(mint(2), 1000) のように
  template <int MOD> ModInt<MOD> pow(ModInt<MOD> a, unsigned long long k) {
    ModInt<MOD> r = 1;
    while (k) {
      if (k & 1)
        r *= a;
      a *= a;
      k >>= 1;
    }
    return r;
  }
  
  //#define int long long を使っても大丈夫
  using mint = ModInt<1000000007>;
  
  // nCrで用いる
  vector<mint> fact, factinv;
  // nCrで用いる 予め計算しておく
  void nCr_compute_factinv(int N) {
    N = min(N, mint::Mod - 1);
    fact.resize(N + 1);
    factinv.resize(N + 1);
    fact[0] = 1;
    rep(i, 1, N + 1) fact[i] = fact[i - 1] * i;
    factinv[N] = fact[N].inverse();
    for (int i = N; i >= 1; i--)
      factinv[i - 1] = factinv[i] * i;
  }
  mint nCr(int n, int r) {
    if (n >= mint::Mod)
      return nCr(n % mint::Mod, r % mint::Mod) *
             nCr(n / mint::Mod, r / mint::Mod);
    return r > n ? 0 : fact[n] * factinv[n - r] * factinv[r];
  }
  
  mint nHr(int n, int r) { return r == 0 ? 1 : nCr(n + r - 1, r); }

